{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ThemeService {\n  constructor() {\n    this.defaultTheme = {\n      primaryColor: '#4a6bff',\n      primaryLight: '#e8edff',\n      secondaryColor: '#34d399',\n      companyName: 'LeadLift'\n    };\n    this.themeSubject = new BehaviorSubject(this.defaultTheme);\n    this.theme$ = this.themeSubject.asObservable();\n  }\n  initializeTheme() {\n    // Try to load theme from localStorage\n    const savedTheme = localStorage.getItem('leadlift-theme');\n    if (savedTheme) {\n      try {\n        const parsedTheme = JSON.parse(savedTheme);\n        this.applyTheme(parsedTheme);\n      } catch (error) {\n        console.error('Error parsing saved theme:', error);\n        this.applyTheme(this.defaultTheme);\n      }\n    } else {\n      this.applyTheme(this.defaultTheme);\n    }\n  }\n  applyTheme(theme) {\n    // Update the observable\n    this.themeSubject.next(theme);\n    // Apply CSS variables\n    document.documentElement.style.setProperty('--theme-primary', theme.primaryColor);\n    document.documentElement.style.setProperty('--theme-primary-light', theme.primaryLight);\n    document.documentElement.style.setProperty('--theme-secondary', theme.secondaryColor);\n    // Add custom theme class to body\n    document.body.classList.add('custom-theme');\n    // Save to localStorage\n    localStorage.setItem('leadlift-theme', JSON.stringify(theme));\n  }\n  resetToDefault() {\n    this.applyTheme(this.defaultTheme);\n  }\n  static {\n    this.ɵfac = function ThemeService_Factory(t) {\n      return new (t || ThemeService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ThemeService,\n      factory: ThemeService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","ThemeService","constructor","defaultTheme","primaryColor","primaryLight","secondaryColor","companyName","themeSubject","theme$","asObservable","initializeTheme","savedTheme","localStorage","getItem","parsedTheme","JSON","parse","applyTheme","error","console","theme","next","document","documentElement","style","setProperty","body","classList","add","setItem","stringify","resetToDefault","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ccame\\CascadeProjects\\lead-generator\\frontend\\src\\app\\services\\theme.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface ThemeConfig {\n  primaryColor: string;\n  primaryLight: string;\n  secondaryColor: string;\n  logo?: string;\n  companyName?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThemeService {\n  private defaultTheme: ThemeConfig = {\n    primaryColor: '#4a6bff',\n    primaryLight: '#e8edff',\n    secondaryColor: '#34d399',\n    companyName: 'LeadLift'\n  };\n\n  private themeSubject = new BehaviorSubject<ThemeConfig>(this.defaultTheme);\n  public theme$ = this.themeSubject.asObservable();\n\n  constructor() { }\n\n  initializeTheme(): void {\n    // Try to load theme from localStorage\n    const savedTheme = localStorage.getItem('leadlift-theme');\n    \n    if (savedTheme) {\n      try {\n        const parsedTheme = JSON.parse(savedTheme);\n        this.applyTheme(parsedTheme);\n      } catch (error) {\n        console.error('Error parsing saved theme:', error);\n        this.applyTheme(this.defaultTheme);\n      }\n    } else {\n      this.applyTheme(this.defaultTheme);\n    }\n  }\n\n  applyTheme(theme: ThemeConfig): void {\n    // Update the observable\n    this.themeSubject.next(theme);\n    \n    // Apply CSS variables\n    document.documentElement.style.setProperty('--theme-primary', theme.primaryColor);\n    document.documentElement.style.setProperty('--theme-primary-light', theme.primaryLight);\n    document.documentElement.style.setProperty('--theme-secondary', theme.secondaryColor);\n    \n    // Add custom theme class to body\n    document.body.classList.add('custom-theme');\n    \n    // Save to localStorage\n    localStorage.setItem('leadlift-theme', JSON.stringify(theme));\n  }\n\n  resetToDefault(): void {\n    this.applyTheme(this.defaultTheme);\n  }\n}\n"],"mappings":"AACA,SAASA,eAAe,QAAQ,MAAM;;AAatC,OAAM,MAAOC,YAAY;EAWvBC,YAAA;IAVQ,KAAAC,YAAY,GAAgB;MAClCC,YAAY,EAAE,SAAS;MACvBC,YAAY,EAAE,SAAS;MACvBC,cAAc,EAAE,SAAS;MACzBC,WAAW,EAAE;KACd;IAEO,KAAAC,YAAY,GAAG,IAAIR,eAAe,CAAc,IAAI,CAACG,YAAY,CAAC;IACnE,KAAAM,MAAM,GAAG,IAAI,CAACD,YAAY,CAACE,YAAY,EAAE;EAEhC;EAEhBC,eAAeA,CAAA;IACb;IACA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;IAEzD,IAAIF,UAAU,EAAE;MACd,IAAI;QACF,MAAMG,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;QAC1C,IAAI,CAACM,UAAU,CAACH,WAAW,CAAC;OAC7B,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD,IAAI,CAACD,UAAU,CAAC,IAAI,CAACf,YAAY,CAAC;;KAErC,MAAM;MACL,IAAI,CAACe,UAAU,CAAC,IAAI,CAACf,YAAY,CAAC;;EAEtC;EAEAe,UAAUA,CAACG,KAAkB;IAC3B;IACA,IAAI,CAACb,YAAY,CAACc,IAAI,CAACD,KAAK,CAAC;IAE7B;IACAE,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,WAAW,CAAC,iBAAiB,EAAEL,KAAK,CAACjB,YAAY,CAAC;IACjFmB,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,WAAW,CAAC,uBAAuB,EAAEL,KAAK,CAAChB,YAAY,CAAC;IACvFkB,QAAQ,CAACC,eAAe,CAACC,KAAK,CAACC,WAAW,CAAC,mBAAmB,EAAEL,KAAK,CAACf,cAAc,CAAC;IAErF;IACAiB,QAAQ,CAACI,IAAI,CAACC,SAAS,CAACC,GAAG,CAAC,cAAc,CAAC;IAE3C;IACAhB,YAAY,CAACiB,OAAO,CAAC,gBAAgB,EAAEd,IAAI,CAACe,SAAS,CAACV,KAAK,CAAC,CAAC;EAC/D;EAEAW,cAAcA,CAAA;IACZ,IAAI,CAACd,UAAU,CAAC,IAAI,CAACf,YAAY,CAAC;EACpC;;;uBAhDWF,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAgC,OAAA,EAAZhC,YAAY,CAAAiC,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}