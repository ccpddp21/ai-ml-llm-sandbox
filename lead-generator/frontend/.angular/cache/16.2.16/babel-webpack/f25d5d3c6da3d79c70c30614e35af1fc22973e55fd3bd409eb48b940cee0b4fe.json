{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let DashboardComponent = class DashboardComponent {\n  constructor(leadService) {\n    this.leadService = leadService;\n    this.leadCount = 0;\n    this.qualifiedLeadCount = 0;\n    this.averageScore = 0;\n    this.isLoading = true;\n    // Placeholder data for charts\n    this.qualificationData = {\n      labels: ['High (80-100)', 'Medium (60-79)', 'Low (0-59)'],\n      datasets: [{\n        data: [0, 0, 0],\n        backgroundColor: ['#34D399', '#4A6BFF', '#F59E0B']\n      }]\n    };\n    this.industryData = {\n      labels: [],\n      datasets: [{\n        data: [],\n        backgroundColor: []\n      }]\n    };\n  }\n  ngOnInit() {\n    this.loadDashboardData();\n  }\n  loadDashboardData() {\n    this.isLoading = true;\n    this.leadService.getAllLeads().subscribe({\n      next: response => {\n        if (response.success && response.data) {\n          const leads = response.data;\n          this.leadCount = leads.length;\n          // Calculate qualified leads (score >= 70)\n          const qualifiedLeads = leads.filter(lead => parseInt(lead.qualificationScore, 10) >= 70);\n          this.qualifiedLeadCount = qualifiedLeads.length;\n          // Calculate average score\n          if (leads.length > 0) {\n            const totalScore = leads.reduce((sum, lead) => sum + parseInt(lead.qualificationScore || '0', 10), 0);\n            this.averageScore = Math.round(totalScore / leads.length);\n          }\n          // Process qualification score distribution\n          const highScoreLeads = leads.filter(lead => parseInt(lead.qualificationScore, 10) >= 80).length;\n          const mediumScoreLeads = leads.filter(lead => parseInt(lead.qualificationScore, 10) >= 60 && parseInt(lead.qualificationScore, 10) < 80).length;\n          const lowScoreLeads = leads.filter(lead => parseInt(lead.qualificationScore, 10) < 60).length;\n          this.qualificationData.datasets[0].data = [highScoreLeads, mediumScoreLeads, lowScoreLeads];\n          // Process industry distribution\n          const industries = {};\n          leads.forEach(lead => {\n            const industry = lead.industry || 'Unknown';\n            industries[industry] = (industries[industry] || 0) + 1;\n          });\n          const industryLabels = Object.keys(industries);\n          const industryValues = Object.values(industries);\n          const industryColors = this.generateColors(industryLabels.length);\n          this.industryData.labels = industryLabels;\n          this.industryData.datasets[0].data = industryValues;\n          this.industryData.datasets[0].backgroundColor = industryColors;\n        }\n        this.isLoading = false;\n      },\n      error: error => {\n        console.error('Error loading dashboard data:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n  // Helper method to generate colors for charts\n  generateColors(count) {\n    const baseColors = ['#4A6BFF', '#34D399', '#F59E0B', '#EF4444', '#8B5CF6', '#EC4899', '#10B981', '#6366F1'];\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n      colors.push(baseColors[i % baseColors.length]);\n    }\n    return colors;\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})], DashboardComponent);","map":{"version":3,"names":["Component","DashboardComponent","constructor","leadService","leadCount","qualifiedLeadCount","averageScore","isLoading","qualificationData","labels","datasets","data","backgroundColor","industryData","ngOnInit","loadDashboardData","getAllLeads","subscribe","next","response","success","leads","length","qualifiedLeads","filter","lead","parseInt","qualificationScore","totalScore","reduce","sum","Math","round","highScoreLeads","mediumScoreLeads","lowScoreLeads","industries","forEach","industry","industryLabels","Object","keys","industryValues","values","industryColors","generateColors","error","console","count","baseColors","colors","i","push","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\ccame\\CascadeProjects\\lead-generator\\frontend\\src\\app\\components\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { LeadService } from '../../services/lead.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  leadCount = 0;\n  qualifiedLeadCount = 0;\n  averageScore = 0;\n  isLoading = true;\n  \n  // Placeholder data for charts\n  qualificationData = {\n    labels: ['High (80-100)', 'Medium (60-79)', 'Low (0-59)'],\n    datasets: [\n      {\n        data: [0, 0, 0],\n        backgroundColor: ['#34D399', '#4A6BFF', '#F59E0B']\n      }\n    ]\n  };\n  \n  industryData = {\n    labels: [],\n    datasets: [\n      {\n        data: [],\n        backgroundColor: []\n      }\n    ]\n  };\n\n  constructor(private leadService: LeadService) { }\n\n  ngOnInit(): void {\n    this.loadDashboardData();\n  }\n  \n  loadDashboardData(): void {\n    this.isLoading = true;\n    \n    this.leadService.getAllLeads().subscribe({\n      next: (response) => {\n        if (response.success && response.data) {\n          const leads = response.data;\n          this.leadCount = leads.length;\n          \n          // Calculate qualified leads (score >= 70)\n          const qualifiedLeads = leads.filter(lead => parseInt(lead.qualificationScore, 10) >= 70);\n          this.qualifiedLeadCount = qualifiedLeads.length;\n          \n          // Calculate average score\n          if (leads.length > 0) {\n            const totalScore = leads.reduce((sum, lead) => sum + parseInt(lead.qualificationScore || '0', 10), 0);\n            this.averageScore = Math.round(totalScore / leads.length);\n          }\n          \n          // Process qualification score distribution\n          const highScoreLeads = leads.filter(lead => parseInt(lead.qualificationScore, 10) >= 80).length;\n          const mediumScoreLeads = leads.filter(lead => parseInt(lead.qualificationScore, 10) >= 60 && parseInt(lead.qualificationScore, 10) < 80).length;\n          const lowScoreLeads = leads.filter(lead => parseInt(lead.qualificationScore, 10) < 60).length;\n          \n          this.qualificationData.datasets[0].data = [highScoreLeads, mediumScoreLeads, lowScoreLeads];\n          \n          // Process industry distribution\n          const industries = {};\n          leads.forEach(lead => {\n            const industry = lead.industry || 'Unknown';\n            industries[industry] = (industries[industry] || 0) + 1;\n          });\n          \n          const industryLabels = Object.keys(industries);\n          const industryValues = Object.values(industries);\n          const industryColors = this.generateColors(industryLabels.length);\n          \n          this.industryData.labels = industryLabels;\n          this.industryData.datasets[0].data = industryValues as number[];\n          this.industryData.datasets[0].backgroundColor = industryColors;\n        }\n        \n        this.isLoading = false;\n      },\n      error: (error) => {\n        console.error('Error loading dashboard data:', error);\n        this.isLoading = false;\n      }\n    });\n  }\n  \n  // Helper method to generate colors for charts\n  generateColors(count: number): string[] {\n    const baseColors = ['#4A6BFF', '#34D399', '#F59E0B', '#EF4444', '#8B5CF6', '#EC4899', '#10B981', '#6366F1'];\n    const colors = [];\n    \n    for (let i = 0; i < count; i++) {\n      colors.push(baseColors[i % baseColors.length]);\n    }\n    \n    return colors;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}